<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>290</x>
      <y>440</y>
      <w>290</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>_cs2800::RhulStack_
bg=red
This class represents a 
Stack of Entry values
--
*Attributes*
-size: integer
-entries: List&lt;Entry&gt;
--
*Responsibilities*
+push(i: Entry)
/    pushes an Entry and adds it to the stack
+pop(): Entry {exception=EmptyStackException}
/    Returns (and removes) most recent Entry/
+top(): Entry {exception=EmptyStackException}
/    Return (but keeps) most recent Entry/
+size():integer
/    How many Entry's in the Stack/

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>250</y>
      <w>250</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt; 
bg=yellow
_cs2800::Calculator_
Allows calculation of 
String Expressions
--
*Responsibilities*
+evaluate(String: what): float
     {exception=InvalidExpressionException}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>890</y>
      <w>210</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt; 
bg=blue
_cs2800::Type_
A list of the types of 
value an Entry can represent
--
_NUMBER_
_SYMBOL_
_STRING_
_INVALID_
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>740</y>
      <w>310</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>_cs2800::Entry_
bg=red
Values stored in a Stack
--
*Attributes*
-number: float
-other: Symbol
-str: String
-type: Type
--
*Responsibilities*
&lt;&lt;constructor&gt;&gt; +Entry(float value)
&lt;&lt;constructor&gt;&gt; +Entry(Symbol which)
+getType(): Type
+getString(): String 
              {Exception=BadTypeException}
+getSymbol(): Symbol 
              {exception=BadTypeException}
+getValue(): float
              {exception=BadTypeException}
+hashcode(): override method to return hash of float,
 string, type, symbol
+equals(): override equals method to check two objects 
are equal.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>840</y>
      <w>240</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt; 
bg=blue
_cs2800::Symbol_
A list of the non-number tokens 
possible in an expression
--
_LEFT BRACKET_
_RIGHT BRACKET_
_TIMES_
_DIVIDE_
_PLUS_
_MINUS_
_INVALID_

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>240</y>
      <w>270</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>bg=red
_cs2800::NumStack_
Since reverse Polish evaluation
only uses a Stack of numeric values
we provide a facade to hide details
--
*Attributes*
-numStack: Stack
--
*Responsibilities*
+push(i: float)
+pop(): float 
               {exception=EmptyStackException}
+isEmpty():boolean to check size of stack 
and return true or false
+size(int): to check the size of the stack

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>230</y>
      <w>290</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>bg=red
_cs2800::OpStack_
Since the Shunting algorithm
only uses a Stack of symbols 
we provide a facade to hide details
--
*Attributes*
-OpStack: RhulStack
--
*Responsibilities*
+push(i: Symbol)
+pop(): Symbol 
                    {exception=EmptyStackException}
+isEmpty():boolean
to check size of stack and return true or false.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>20</y>
      <w>260</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>bg=red
_cs2800::RevPolishCalc_
Evaluates Reverse Polish
String Expressions
--
*Attributes*
-values: NumStack
--
*Responsibilities*
+evaluate(String: what): float
     {exception=InvalidExpressionException}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>420</y>
      <w>130</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
&lt;&lt;facade&gt;&gt;</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>170</x>
      <y>470</y>
      <w>140</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1pos=-50,20
m1=&lt;&lt;facade&gt;&gt;</panel_attributes>
    <additional_attributes>40.0;10.0;120.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>180</y>
      <w>60</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>700</y>
      <w>50</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..*</panel_attributes>
    <additional_attributes>20.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>810</y>
      <w>160</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>230</x>
      <y>860</y>
      <w>70</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>180</y>
      <w>180</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>850</x>
      <y>230</y>
      <w>270</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>bg=red
_cs2800::StrStack_
The Shunting algorithm
requires reversing an expression in 
order to evaluate left to right - so 
we provide a facade to hide details
--
*Attributes*
-StrStack: RhulStack
--
*Responsibilities*
+push(str: String)
+pop(): String 
                {exception=EmptyStackException}
+isEmpty():boolean
to check size of stack to return true or false.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>450</y>
      <w>430</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=&lt;&lt;facade&gt;&gt;
m1pos=-20,40</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>460</x>
      <y>0</y>
      <w>300</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>bg=white
_cs2800::InvalidExpressionException_
class created to create a custom 
exception for when an invalid
expression is obtained.
--
*Attributes*
-serialversionUID: long: used to create the exception
(generated using quick fix)
--
*Responsibilities*
&lt;&lt;constructor&gt;&gt;
InvalidExpressionException(String: message):
takes the super of message to create exception.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>180</y>
      <w>190</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>100</y>
      <w>60</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>570</y>
      <w>260</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>cs2800:&lt;&lt;Exception&gt;&gt;
BadTypeException

--
*Attributes*
-SerialVersionUID : long (generated)
--
#Operation(i: int): int
/+AbstractOperation()/
--
Responsibilities
&lt;&lt;constructor&gt;&gt; BadType(string messge).</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>210</x>
      <y>700</y>
      <w>90</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1pos=-50,20
m1=&lt;&lt;facade&gt;&gt;</panel_attributes>
    <additional_attributes>50.0;10.0;70.0;110.0</additional_attributes>
  </element>
</diagram>
